apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/kotlin')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    // Avoid fat jarring
    implementation project(":cordapp-application")

    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    implementation "$corda_release_group:corda-core:$corda_release_version"

    cordapp "$tokens_sdk:contract:$tokens_sdk_version"
    cordapp "$tokens_sdk:workflow:$tokens_sdk_version"
    cordapp "$tokens_sdk:money:$tokens_sdk_version"

    implementation "$corda_release_group:corda-rpc:$corda_release_version"
    implementation "$corda_release_group:corda-jackson:$corda_release_version"

    implementation("org.springframework.boot:spring-boot-starter-websocket:$spring_boot_version") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }

    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    implementation "org.apache.logging.log4j:log4j-web:${log4j_version}"
    implementation "org.slf4j:jul-to-slf4j:$slf4j_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "$corda_release_group:corda-node-driver:$corda_release_version"
    testImplementation (group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.0.2.RELEASE') {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.2"
        apiVersion = "1.2"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task runTournamentServer(type: JavaExec, dependsOn: assemble) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.accounts.cordapp.sweepstake.clients.WorldCupApplication'
    args '--server.port=8080', '--config.rpc.host=localhost', '--config.rpc.port=10005', '--config.rpc.username=user1', '--config.rpc.password=test'
}
