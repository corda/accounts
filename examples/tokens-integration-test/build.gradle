apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'net.corda.plugins.quasar-utils'

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    // For testing.
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "$corda_release_group:corda-core:$corda_release_version"
    testImplementation "$corda_release_group:corda-node-driver:$corda_release_version"
    testImplementation "$corda_release_group:corda-test-common:$corda_release_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    testImplementation "io.reactivex:rxjava:$rxjava_version"

    // Corda dependencies.
    testImplementation "$corda_release_group:corda-core:$corda_release_version"

    // Accounts dependencies.
    testImplementation project(":contracts")
    testImplementation project(":workflows")

    // Token SDK dependencies.
    testImplementation "$tokens_release_group:tokens-contracts:$tokens_release_version"
    testImplementation "$tokens_release_group:tokens-workflows:$tokens_release_version"
    testImplementation "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"

    testRuntimeOnly "org.iq80.snappy:snappy:$snappy_version"
}

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/kotlin')
        }
    }
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    jvmArgs test_module_opens
    jvmArgs test_module_exports
}
