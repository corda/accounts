apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

cordapp {
    targetPlatformVersion 14
    minimumPlatformVersion 14

    workflow {
        name "Loan Book Trading"
        vendor "Corda Open Source"
        versionId 1
    }
}

sourceSets {
    main {
        resources {
            srcDir "../config/dev"
        }
    }
    test {
        resources {
            srcDir "../config/test"
        }
    }
}

dependencies {
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "junit:junit:$junit_version"

    // Corda integration dependencies
    corda "$corda_release_group:corda:$corda_release_version"

    cordaProvided group: "$corda_release_group", name: "corda-core", version: "$corda_release_version"
    cordaProvided "$corda_release_group:corda-jackson:$corda_release_version"
    cordaProvided "$corda_release_group:corda-rpc:$corda_release_version"
    cordaProvided "org.hibernate:hibernate-core:$hibernate_version"
    cordaProvided "javax.persistence:javax.persistence-api:2.2"

    cordapp project(":contracts")
    cordapp project(":workflows")

    testImplementation "$corda_release_group:corda-node-driver:$corda_release_version"
    testImplementation "$corda_release_group:corda-test-common:$corda_release_version"
    testImplementation "io.reactivex:rxjava:$rxjava_version"

    testRuntimeOnly "org.iq80.snappy:snappy:$snappy_version"
}

test {
    forkEvery 1

    jvmArgs test_module_opens
    jvmArgs test_module_exports
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {

    nodeDefaults {
        cordapp project(":contracts")
        cordapp project(":workflows")
    }
    
    directory "./build/nodes"
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10000
        rpcSettings {
            address("localhost:10001")
            adminAddress("localhost:10002")
        }
    }
    node {
        name "O=Agent,L=London,C=GB"
        p2pPort 10004
        rpcSettings {
            address("localhost:10005")
            adminAddress("localhost:10006")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=FundManager1,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10010")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=FundManager2,L=Paris,C=FR"
        p2pPort 10012
        rpcSettings {
            address("localhost:10013")
            adminAddress("localhost:10014")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Administrator1,L=Paris,C=FR"
        p2pPort 10020
        rpcSettings {
            address("localhost:10021")
            adminAddress("localhost:10022")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}
