buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '4.3-RC01'
        corda_gradle_plugins_version = '4.0.42'
        accounts_release_group = 'com.r3.corda.lib.accounts'
        accounts_release_version = '1.0-RC03'
        tokens_release_group = 'com.r3.corda.lib.tokens'
        tokens_release_version = '1.0'
        quasar_version = '0.7.10'
        kotlin_version = '1.2.71'
        junit_version = '4.12'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://ci-artifactory.corda.r3cev.com/artifactory/corda-dev" }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
    //This is needed until the accounts sdk is official
    maven { url "http://ci-artifactory.corda.r3cev.com/artifactory/corda-lib-dev" }
    maven { url 'http://ci-artifactory.corda.r3cev.com/artifactory/corda-lib' }
    //Corda testing node-driver requires gradle-tooling-api
    maven { url 'https://repo.gradle.org/gradle/libs-releases-local/' }
    //Crash Shell dependencies are not published correctly in R3 repo
    maven { url 'https://jitpack.io' }
}

wrapper {
    gradleVersion = "4.10.2"
    distributionType = Wrapper.DistributionType.ALL
}

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'


cordapp {
    info {
        name "World Cup Sweepstake App"
        vendor "Corda Open Source"
        targetPlatformVersion 4
        minimumPlatformVersion 4
    }
}

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/kotlin')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}


dependencies {
    // Corda.
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$accounts_release_group:accounts-contracts:$accounts_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"

    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // Accounts.
    cordapp "com.r3.corda.lib.accounts:accounts-contracts:$accounts_release_version"
    cordapp "com.r3.corda.lib.accounts:accounts-workflows:$accounts_release_version"
    // Tokens.
    cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-money:$tokens_release_version"

    // Kotlin.
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Testing.
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"
    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"
}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.2"
        apiVersion = "1.2"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {

    nodeDefaults {
        cordapp("$accounts_release_group:accounts-contracts:$accounts_release_version")
        cordapp("$accounts_release_group:accounts-workflows:$accounts_release_version")
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10000
        sshdPort 2222
        rpcSettings {
            address("localhost:10001")
            adminAddress("localhost:10002")
        }
        cordapps.clear()
    }
    node {
        name "O=Agent,L=London,C=GB"
        p2pPort 10004
        sshdPort 2223
        rpcSettings {
            address("localhost:10005")
            adminAddress("localhost:10006")
        }
    }
    node {
        name "O=FundManager1,L=New York,C=US"
        p2pPort 10008
        sshdPort 2224
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10010")
        }
    }
    node {
        name "O=FundManager2,L=Paris,C=FR"
        p2pPort 10012
        sshdPort 2224
        rpcSettings {
            address("localhost:10013")
            adminAddress("localhost:10014")
        }
    }
    node {
        name "O=Administrator1,L=Paris,C=FR"
        p2pPort 10020
        sshdPort 2225
        rpcSettings {
            address("localhost:10021")
            adminAddress("localhost:10022")
        }
    }
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}
