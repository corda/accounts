apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

cordapp {
    info {
        name "World Cup Sweepstake App"
        vendor "Corda Open Source"
        targetPlatformVersion 4
        minimumPlatformVersion 4
    }
    signing {
        enabled false
    }
}


sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/kotlin')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}


dependencies {
    // Accounts
    cordapp project(":workflows")
    cordapp project(":contracts")
    cordapp project(":examples:cordapp-sweepstake:states")
    cordapp project(":examples:cordapp-sweepstake:flows")

    // Corda
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"

    // Tokens
    cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-money:$tokens_release_version"

    // Spring
    compile("org.springframework.boot:spring-boot-starter-websocket:$spring_boot_version") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }

    // JSON parser
    compile "com.beust:klaxon:5.0.1"

    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Testing
    testCompile project(":examples:cordapp-sweepstake:states")
    testCompile project(":examples:cordapp-sweepstake:flows")
    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"
    testCompile ("org.springframework.boot:spring-boot-starter-test:2.0.2.RELEASE") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
}

task deployNodesX(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {

    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(":workflows")
        cordapp project(":contracts")
        cordapp project(":examples:cordapp-sweepstake:states")
        cordapp project(":examples:cordapp-sweepstake:flows")
        cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
        cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
        cordapp "$tokens_release_group:tokens-money:$tokens_release_version"
    }

    directory "./build/nodes"
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10000
        sshdPort 2222
        rpcSettings {
            address("localhost:10001")
            adminAddress("localhost:10002")
        }
    }
    node {
        name "O=TournamentA,L=London,C=GB"
        p2pPort 10004
        sshdPort 2223
        rpcSettings {
            address("localhost:10005")
            adminAddress("localhost:10006")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=TournamentB,L=London,C=GB"
        p2pPort 10008
        sshdPort 2224
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10010")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task runTournamentServer(type: JavaExec, dependsOn: assemble) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.r3.corda.lib.accounts.examples.sweepstake.cordapp.clients.WorldCupApplication'
    args '--server.port=8080', '--config.rpc.host=localhost', '--config.rpc.port=10005', '--config.rpc.username=user1', '--config.rpc.password=test'
}