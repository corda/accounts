import static org.gradle.api.JavaVersion.VERSION_17

buildscript {
    ext {
        accounts_release_group = 'com.r3.corda.lib.accounts'
        accounts_release_version = '1.1-HC03'
        corda_release_group = 'net.corda'
        corda_release_version = '4.12-HC03'
        tokens_release_group = 'com.r3.corda.lib.tokens'
        tokens_release_version = '1.3-HC03'
        confidential_id_release_group = "com.r3.corda.lib.ci"
        confidential_id_release_version = "1.2-HC03"

        corda_gradle_plugins_version = '5.1.1'
        mavenVersion = '3.1.0'
        maven_resolver_version = "1.1.1"
        kotlin_version = '1.9.0'
        junit_version = '4.12'
        quasar_version = '0.9.0_r3'
        log4j_version = '2.9.1'
        spring_boot_version = '3.1.2'
        hibernate_version = '5.6.14.Final'
        servlet_version = '4.0.1'

        test_module_opens = [
                '--add-opens', 'java.base/java.time=ALL-UNNAMED', '--add-opens', 'java.base/java.io=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util=ALL-UNNAMED', '--add-opens', 'java.base/java.net=ALL-UNNAMED',
                '--add-opens', 'java.base/java.nio=ALL-UNNAMED', '--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED',
                '--add-opens', 'java.base/java.security.cert=ALL-UNNAMED', '--add-opens', 'java.base/java.security=ALL-UNNAMED',
                '--add-opens', 'java.base/javax.net.ssl=ALL-UNNAMED', '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED', '--add-opens', 'java.sql/java.sql=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util.concurrent.atomic=ALL-UNNAMED'
        ]
        test_module_exports = [
                '--add-exports', 'java.base/sun.nio.ch=ALL-UNNAMED'
        ]
    }

    repositories {
        jcenter()
        mavenCentral()
        maven { url "${publicArtifactURL}/corda-releases" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
    }
}

plugins {
    id 'org.jetbrains.kotlin.plugin.jpa' version "$kotlin_version" apply false
    id 'org.springframework.boot' version '3.1.2' apply false
    id "org.ajoberstar.grgit" version "4.0.0"
    id 'corda.root-publish'
}

// If the command line project option -PversionFromGit is added to the gradle invocation, we'll resolve
// the latest git commit hash and timestamp and create a version postfix from that
if (project.hasProperty("versionFromGit")) {
    ext.versionSuffix = "${grgit.head().dateTime.format("yyyyMMdd_HHmmss")}-${grgit.head().abbreviatedId}"
}

if (ext.versionSuffix != "") {
    ext.accounts_release_version = "${ext.baseVersion}-${ext.versionSuffix}".toString()
} else {
    ext.accounts_release_version = "${ext.baseVersion}".toString()
}

allprojects {
    version accounts_release_version
}

subprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'net.corda.plugins.quasar-utils'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven {
            url "${publicArtifactURL}/corda-releases"
            mavenContent {
                releasesOnly()
            }
        }
        maven { url "${publicArtifactURL}/corda-dependencies" }
        maven {
            url "${publicArtifactURL}/corda-lib"
            mavenContent {
                releasesOnly()
            }
        }
        maven {
            url "${artifactoryContextUrl}/corda-dev"
            credentials {
                username = System.getenv('CORDA_ARTIFACTORY_USERNAME')
                password = System.getenv('CORDA_ARTIFACTORY_PASSWORD')
            }
        }
        maven {
            url "${artifactoryContextUrl}/corda-lib-dev"
            credentials {
                username = System.getenv('CORDA_ARTIFACTORY_USERNAME')
                password = System.getenv('CORDA_ARTIFACTORY_PASSWORD')
            }
        }
        maven { url "https://repo.gradle.org/gradle/libs-releases-local" }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            languageVersion = "1.9"
            apiVersion = "1.9"
            jvmTarget = VERSION_17
            javaParameters = true   // Useful for reflection.
        }
    }


    tasks.withType(Test).all {
        minHeapSize = "128m"
        maxHeapSize = "4096m"
    }

    quasar {
        excludePackages.addAll(
                "antlr**",
                "com.codahale**",
                "com.fasterxml.**",
                "com.github.benmanes.caffeine.**",
                "com.google.**",
                "com.lmax.**",
                "com.zaxxer.**",
                "net.bytebuddy**",
                "io.github.classgraph**",
                "io.netty*",
                "liquibase**",
                "net.i2p.crypto.**",
                "nonapi.io.github.classgraph.**",
                "org.apiguardian.**",
                "org.bouncycastle**",
                "org.codehaus.**",
                "org.h2**",
                "org.hibernate**",
                "org.jboss.**",
                "org.objenesis**",
                "org.w3c.**",
                "org.xml**",
                "org.yaml**",
                "rx**",
                "kotlin**"
        )
    }
}

def publishProjects = [project(":contracts"), project(":workflows")]

configure(publishProjects) { subproject ->
    task sourceJar(type: Jar, dependsOn: subproject.classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: subproject.javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    task install(dependsOn: 'publishToMavenLocal')

    publishing {
        publications {
            create(subproject.name, MavenPublication) {
                from components.java

                groupId subproject.group
                artifactId "accounts-${subproject.name}"
                artifact tasks.sourceJar
                artifact tasks.javadocJar

                pom {
                    description = subproject.description
                }
            }
        }
    }
}
